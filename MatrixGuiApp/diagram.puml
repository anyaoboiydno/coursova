@startuml

class MainWindowViewModel {
    - matrixSize : string
    - inputMatrix : string
    - resultText : string
    - selectedMethod : string
    + AvailableMethods : ObservableCollection<string>
    - _matrixService : MatrixService
    + Solve() : void
    + GenerateMatrix() : void
    + ClearMatrix() : void
    + SaveResult() : void
}

class MatrixService {
    + GenerateRandomMatrix(size: int) : string
    + ParseMatrix(text: string, size: int) : double[,]
}

class DeterminantCalculator {
    + Determinant(matrix: double[,]) : double
}

class MatrixFormatter {
    + ToString(matrix: double[,]) : string
}

class MatrixInverter {
    + InvertByJordanGauss(mat: double[,]) : (double[,], string)
    + InvertBySchulz(A: double[,]) : (double[,], string)
    - Multiply(A: double[,], B: double[,], ref count: int) : double[,]
    - Subtract(A: double[,], B: double[,], ref count: int) : double[,]
    - Add(A: double[,], B: double[,], ref count: int) : double[,]
}

MainWindowViewModel --> MatrixService
MainWindowViewModel --> MatrixInverter : uses
MainWindowViewModel --> MatrixFormatter : uses
MatrixService --> DeterminantCalculator

@enduml
